
/*
    static runCommand(appName: string, request: Request<ParamsDictionary>, response: Response, uiProps: any, tab)
    {
        let xmlIn = '';
        const isXmlRequest = false; // array_key_exists('xml', $_REQUEST) || array_key_exists('XML', $_REQUEST))
        if ((requestMethod === 'POST') && isset(request.query.CONTENT_TYPE) ) {
            // $msg = sprintf('\n==> requestMethod: POST, _SERVER['CONTENT_TYPE'] is: %s', request.query.CONTENT_TYPE);
            // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', $msg);

            if (strpos(request.query.CONTENT_TYPE, 'application/xml') !== false) {
                // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', 'Incoming CONTENT_TYPE is application/xml\n');

                header('Content-Type: application/xml; charset=UTF-8');

                try {
                    ServerLogger.log(LOG_DEBUG, 'Getting XML stream from php://input \n');
                    $xmlIn = file_get_contents('php://input');
                } catch (Exception) {
                    SuiData.statusValue = 1;
                    SuiData.statusMsg = 'Exception while building XML request: ' . $e;
                }

            } else if (strpos(request.query.CONTENT_TYPE, 'application/x-www-form-urlencoded') !== false) {
                // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', 'Incoming CONTENT_TYPE is application/x-www-form-urlencoded\n');

                try {
                    header('Content-Type: application/json; charset=UTF-8');
                    // echo '{'document':{'body': 'This is a response'}}\n';
                    $xmlIn = SuiData.getXmlFromUrlArgs();
                    // $msg = sprintf('Xml Command: %s\n', $xmlIn);
                    // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', $msg);
                    // ClientLogger.log(LOG_DEBUG, $msg);
                } catch (Exception) {
                    SuiData.statusValue = 1;
                    SuiData.statusMsg = 'Exception while building JSON request: ' . $e;
                    // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', SuiData.statusMsg);
                }

            } else if (strpos(request.query.CONTENT_TYPE, 'application/json') !== false) {
                // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', 'Incoming CONTENT_TYPE is application/json\n');

                try {
                    header('Content-Type: application/json; charset=UTF-8');
                    // echo '{'document':{'body': 'This is a response'}}\n';
                    // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', 'Xml Command:\n' . $xmlIn);
                    $xmlIn = SuiData.getXmlFromJsonArgs();
                    // ClientLogger.log(LOG_DEBUG, 'xml constructed from URL Params:\n' . $xmlIn);
                } catch (Exception $e) {
                    SuiData.statusValue = 1;
                    SuiData.statusMsg = 'Exception while building JSON request: ' . $e;
                    // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', SuiData.statusMsg);
                }
            } else if (!defined(requestMethod)) /* Look for a file as input. * / {
                // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', 'requestMethod is not defined\n');
                $options = getopt('f:');
                $xmlIn = file_get_contents($options['f']);

                //$xmlIn = file_get_contents('./test_stream.xml');  Greg - Start here, at least it appears to get through.
            } else {
                SuiData.statusValue = 2;
                // ClientLogger.log(LOG_INFO, 'Unexpected content type in request');
                // $msg = sprintf('Unexpected content type in request: %s\n', requestMethod);
                // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', $msg);
            }
        }

        SuiData.zmqRequest($xmlIn, $portNum);

        if (isXmlRequest()) {
            $response = SuiData.createXmlResponse();
        } else {
            // Default is to return JSON
            // $response = XmlDiffTool::xmlToJSON($response, '');
            // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', 'call createJSONResponse()\n');
            $response = SuiData.createJSONResponse();
            // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', '\ngot response from createJSONResponse');
        }

        // ClientLogger.log(LOG_DEBUG, 'Response sent:\n' . $response);
        // writeLog(RAM_DISK_APACHE_FOLDER . 'my-apache-log.txt', '\nSending Response from createJSONResponse\n');

        echo $response;
    }

    // from sui_command.php:
    // zmqRequest($props, $DataPortPrefix, $cmd, $valueName, $expectedResponseRoot, "get");
    static suiCommandRequest(appName: string, request: Request<ParamsDictionary>, response: Response, uiProps: any, tab): string {
        // cloned from suiRequest -- START HERE
        if (!uiProps) {
            return 'No response is defined for the root folder "/".';
        }

        if (SuiData.propOrDefault(uiProps, `${tab.dataServiceEnabled}`, 1 ) === 0) {
            Logger.log(LogLevel.INFO`Service is disabled for ${tab.tabName}`);
            const errorXml = `<Data_Summary>${SuiData.errorToXml("1005", "suiRequest")}</Data_Summary>`;
            response.send(errorXml);
        } else {

            const requester = SuiData.zmq.socket('req');

            requester.on('message', function (reply) {
                SuiData.replyNum++;
                const zmqResponse = reply.toString().replace(
                    '</Data_Summary>',
                    '<status>0</status></Data_Summary>');
                requester.close();

                if ((typeof request.query.xml === 'string')
                    || (typeof request.query.XML === 'string')) {
                    response.setHeader('Content-Type', 'application/xml');
                    response.setHeader('charset', 'UTF-8');
                    const xmlMetaPrefix = '<?xml version="1.0" encoding="UTF-8"?>';
                    response.send(xmlMetaPrefix + zmqResponse);
                } else {
                    response.setHeader('Content-Type', 'application/json');
                    response.setHeader('charset', 'UTF-8');
                    let versionString = 'V.xxx';
                    if (typeof request.query.version === 'string') {
                        versionString = request.query.version;
                    }
                    const sJson = SuiData.xmlToJSON(zmqResponse, appName, uiProps, request);
                    response.send(sJson);
                }

                Logger.log(LogLevel.INFO`Received zmqResponse #${SuiData.replyNum}: ${zmqResponse.substr(0, 94)}...`);
                return;
                // process.exit(0);
            });

            requester.connect(`tcp://localhost:${tab.dataPort}`);

            const dataCmd = tab.dataCmd || 'EXPORT_DATA';
            const valueName = tab.valueName || '';
            const xmlRequest = `<request COMMAND="${dataCmd}" valueName="${valueName}"/>`;

            Logger.log(LogLevel.VERBOSE, "Send Request: " + xmlRequest);
            requester.send(xmlRequest);

            process.on('SIGINT', function () {
                requester.close();
            });
        }
    }
*/
